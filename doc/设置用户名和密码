有三种方式：
1  通过配置文件(application.properties)
    spring.security.user.name=lucia
    spring.security.user.password=lucia
2 通过配置类,自定义类(SecurityConfig)，继承WebSecurityConfigurerAdapter，重写方法
    protected void configure(AuthenticationManagerBuilder auth)
    code:
        package com.example.securingweb.config;

        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
        import org.springframework.security.crypto.password.PasswordEncoder;

        @Configuration
        public class SecurityConfig extends WebSecurityConfigurerAdapter {
            @Override
            protected void configure(AuthenticationManagerBuilder auth) throws Exception {
                BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
                String password = encoder.encode("lucia");
                auth.inMemoryAuthentication()
                        .withUser("lucia").
                        password(password).roles("admin");
            }

            @Bean
            PasswordEncoder passwordEncoder() {
                return new BCryptPasswordEncoder();
            }
        }

3 自定义实现类
    1 创建 UserdetailsService 实现类
    2 编写 UserDetails 的实现
    3 见demo
